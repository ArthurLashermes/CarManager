@page "/VehicleDetail/{VehicleId:int}"
@using Shared.DeserializeModels
@using Shared.Enum
@using Shared.SerializeModels
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<BackButton />

<div class="vehicle-details-container">
	<div class="vehicle-title">
		<h3>Véhicule @vehicle?.RegistrationNumber</h3>
	</div>
	<div class="maintenances-title">
		<h3>Entretiens</h3>
		<button class="btn btn-primary" @onclick="() => ShowAddMaintenancePopup = true">+</button>
	</div>

	@if (ShowAddMaintenancePopup)
	{
		<div class="add-maintenance-popup">
			<div class="popup-content">
				<h4>Ajouter un entretien</h4>

				<div class="form-group">
					<label>Kilométrage:</label>
					<span class="form-control-plaintext">@newMaintenance.MileageAtMaintenance</span>
				</div>

				<div class="form-group">
					<label>Description:</label>
					<InputTextArea class="form-control" @bind-Value="newMaintenance.WorkDone" />
				</div>

				<button class="btn btn-success" @onclick="AddMaintenance">Ajouter</button>
				<button class="btn btn-secondary" @onclick="() => ShowAddMaintenancePopup = false">Annuler</button>
			</div>
		</div>
	}

	<div class="vehicle-info">
		@if (!string.IsNullOrEmpty(customValidationError))
		{
			<div class="alert alert-danger">@customValidationError</div>
		}
		<div class="form-group">
			<label>Année:</label>
			<InputNumber class="form-control" @bind-Value="vehicle.Year" />
		</div>
		<div class="form-group">
			<label>Immatriculation:</label>
			<InputText class="form-control" @bind-Value="vehicle.RegistrationNumber" />
		</div>
		<div class="form-group">
			<label for="EnergyType">Énergie:</label>
			<InputSelect id="energyType" class="form-control" @bind-Value="vehicle.EnergyType">
				@foreach (var energy in Enum.GetValues<EnergyTypeEnum>())
				{
					<option value="@energy">@energy</option>
				}
			</InputSelect>
		</div>
		<div class="form-group">
			<label>Kilometrage:</label>
			<InputNumber class="form-control" @bind-Value="vehicle.Mileage" />
		</div>
		<button class="btn btn-success" @onclick="UpdateVehicle">Valider les modifications</button>
	</div>


	<div class="maintenances-info">
		<table class="table">
			<thead>
				<tr>
					<th>Km</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var maintenance in vehicle.Maintenances ?? new List<MaintenanceModelDeserialize>())
				{
					<tr>
						<td>@maintenance.MileageAtMaintenance</td>
						<td>@maintenance.WorkDone</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

@code {
	[Parameter]
	public int VehicleId { get; set; }

	private VehicleModelDeserialize vehicle = new VehicleModelDeserialize();
	private string customValidationError;
	private bool ShowAddMaintenancePopup = false;
	private MaintenanceModelSerialize newMaintenance = new MaintenanceModelSerialize();
	private string originalRegistrationNumber;

	protected override async Task OnInitializedAsync()
	{
		vehicle = await HttpClient.GetFromJsonAsync<VehicleModelDeserialize>($"api/Vehicle/{VehicleId}");
		newMaintenance.MileageAtMaintenance = vehicle.Mileage;
		originalRegistrationNumber = vehicle.RegistrationNumber;
	}

	private async Task UpdateVehicle()
	{
		customValidationError = string.Empty;
		if (originalRegistrationNumber != vehicle.RegistrationNumber)
		{
			var registrationNumberExists = await HttpClient.GetFromJsonAsync<bool>($"api/Vehicle/exists/{vehicle.RegistrationNumber}?excludeVehicleId={VehicleId}");
			if (registrationNumberExists)
			{
				customValidationError = "Un véhicule avec cette plaque d'immatriculation existe déjà.";
				return;
			}
		}

		var vehicleEdited = ConvertToSerializeModel(vehicle);
		var response = await HttpClient.PutAsJsonAsync($"api/Vehicle/{vehicle.Id}", vehicleEdited);
		if (response.IsSuccessStatusCode)
		{
			NavigationManager.NavigateTo("/vehicles");
		}
		else
		{
			customValidationError = await response.Content.ReadAsStringAsync();
		}
	}

	private VehicleModelSerialize ConvertToSerializeModel(VehicleModelDeserialize vehicleDeserialize)
	{
		return new VehicleModelSerialize
			{
				RegistrationNumber = vehicleDeserialize.RegistrationNumber,
				Year = vehicleDeserialize.Year,
				Mileage = vehicleDeserialize.Mileage,
				EnergyType = vehicleDeserialize.EnergyType,
				CarId = vehicleDeserialize.Car.Id,
			};
	}

	private async void AddMaintenance()
	{
		newMaintenance.VehicleId = vehicle.Id;

		var response = await HttpClient.PostAsJsonAsync("api/Maintenance", newMaintenance);

		if (response.IsSuccessStatusCode)
		{
			ShowAddMaintenancePopup = false;
			newMaintenance = new MaintenanceModelSerialize();
			await LoadVehicleDetails();

			await InvokeAsync(StateHasChanged);
		}
		else
		{
			// Gérer l'erreur
			Console.WriteLine("Erreur lors de l'ajout de la maintenance.");
		}
	}

	private async Task LoadVehicleDetails()
	{
		vehicle = await HttpClient.GetFromJsonAsync<VehicleModelDeserialize>($"api/Vehicle/{VehicleId}");
	}
}

<style>
	.vehicle-details-container {
		display: flex;
		flex-direction: column;
	}

	.vehicle-title, .maintenances-title {
		text-align: left;
	}

	.maintenances-title {
		text-align: center;
		margin-top: 20px;
	}

	.vehicle-info {
		margin-top: 10px;
	}

	textarea {
		width: 100%;
		height: 100px;
		margin-bottom: 20px;
	}

	.maintenances-info {
		margin-top: 20px;
	}

	.add-maintenance-popup {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.popup-content {
		background-color: white;
		padding: 20px;
		border-radius: 5px;
	}
</style>