@page "/vehicle/add"
@using Shared.DeserializeModels
@using Shared.Enum
@using Shared.SerializeModels
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Ajouter un Véhicule</h3>

@if (!string.IsNullOrEmpty(customValidationError))
{
    <div class="alert alert-danger">@customValidationError</div>
}

<EditForm Model="@vehicle" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="brandId">Marque:</label>
        <InputSelect id="brandId" class="form-control" @bind-Value="SelectedBrandId">
            <option value="">Sélectionnez une marque</option>
            @foreach (var brand in brands)
            {
                <option value="@brand.Id">@brand.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="carId">Modèle:</label>
        <InputSelect id="carId" class="form-control" @bind-Value="selectedCarId">
            <option value="">Sélectionnez un modèle</option>
            @foreach (var car in cars)
            {
                <option value="@car.Id">@car.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="registrationNumber">Immatriculation:</label>
        <InputText id="registrationNumber" class="form-control" @bind-Value="vehicle.RegistrationNumber" />
    </div>

    <div class="form-group">
        <label for="EnergyType">Énergie:</label>
        <InputSelect id="energyType" class="form-control" @bind-Value="vehicle.EnergyType">
            @foreach (var energy in Enum.GetValues<EnergyTypeEnum>())
            {
                <option value="@energy">@energy</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="Year">Année:</label>
        <InputNumber id="year" class="form-control" @bind-Value="vehicle.Year" />
    </div>

    <div class="form-group">
        <label for="Mileage">Kilométrage:</label>
        <InputNumber id="mileage" class="form-control" @bind-Value="vehicle.Mileage" />
    </div>

    <button type="submit" class="btn btn-primary">Ajouter</button>
</EditForm>

@code {

    private int _selectedBrandId;
    public int SelectedBrandId
    {
        get => _selectedBrandId;
        set
        {
            if(_selectedBrandId != value)
            {
                _selectedBrandId = value;
                _ = OnBrandChanged(value);
            }
        }
    }
    private int selectedCarId;

    private List<BrandModelDeserialize> brands = new List<BrandModelDeserialize>();
    private List<CarModelDeserialize> cars = new List<CarModelDeserialize>();
    private VehicleModelSerialize vehicle = new VehicleModelSerialize();
    private string customValidationError;

    protected override async Task OnInitializedAsync()
    {
        brands = await HttpClient.GetFromJsonAsync<List<BrandModelDeserialize>>("api/Brand");
    }

    private async Task OnBrandChanged(int value)
    {
        cars = await HttpClient.GetFromJsonAsync<List<CarModelDeserialize>>($"api/car/bybrand/{SelectedBrandId}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        customValidationError = string.Empty;

        if (SelectedBrandId == 0)
        {
            customValidationError = "La sélection d'une marque est requise.";
            return;
        }

        if (selectedCarId == 0)
        {
            customValidationError += "\nLa sélection d'un modèle est requise.";
            return;
        }
        
        var registrationNumberExists = await HttpClient.GetFromJsonAsync<bool>($"api/Vehicle/exists/{vehicle.RegistrationNumber}");
        if (registrationNumberExists)
        {
            customValidationError = "Un véhicule avec cette plaque d'immatriculation existe déjà.";
            return;
        }


        vehicle.CarId = selectedCarId;

        var response = await HttpClient.PostAsJsonAsync("api/Vehicle", vehicle);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/vehicles");
        }
        else
        {
            customValidationError = await response.Content.ReadAsStringAsync();
        }
    }
}
