@page "/car/add"
@using Shared.DeserializeModels
@using Shared.SerializeModels
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


<h3>Ajouter un nouveau modèle de voiture</h3>

<EditForm Model="@car" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />

	@if (!string.IsNullOrEmpty(customValidationError))
	{
		<div class="alert alert-danger">@customValidationError</div>
	}

	<div class="form-group">
		<label for="brandId">Marque:</label>
		<InputSelect id="brandId" class="form-control" @bind-Value="selectedBrandId">
			<option value="">Sélectionnez une marque</option>
			@foreach (var brand in brands)
			{
				<option value="@brand.Id">@brand.Name</option>
			}
		</InputSelect>
	</div>

	<div class="form-group">
		<label for="name">Nom:</label>
		<InputText id="name" class="form-control" @bind-Value="car.Name" />
	</div>

	<div class="form-group">
		<label for="maintenanceFrequency">Fréquence de maintenance:</label>
		<InputNumber id="maintenanceFrequency" class="form-control" @bind-Value="car.MaintenanceFrequency" />
	</div>

	<button type="submit" class="btn btn-primary">Ajouter</button>
</EditForm>

@code {
	private int selectedBrandId;
	private CarModelSerialize car = new CarModelSerialize();
	private List<BrandModelDeserialize> brands = new List<BrandModelDeserialize>(); // Remplacer BrandModel par le type correct pour votre modèle de marque
	private List<CarModelDeserialize> cars = new List<CarModelDeserialize>();
	private bool nameExists = false;
	private string customValidationError;

	protected override async Task OnInitializedAsync()
	{
		brands = await HttpClient.GetFromJsonAsync<List<BrandModelDeserialize>>("api/Brand");
	}

	private async Task HandleValidSubmit()
	{
		customValidationError = string.Empty;
		if (selectedBrandId == 0)
		{
			customValidationError = "Vous devez sélectionnez une marque";
			return;
		}

		if (string.IsNullOrEmpty(car.Name))
		{
			customValidationError = "Le nom du modèle ne doit pas être vide";
			return;
		}

		var encodedName = Uri.EscapeDataString(car.Name);
		var carNameExists = await HttpClient.GetFromJsonAsync<bool>($"api/Car/exists/{encodedName}");

		if (carNameExists)
		{
			customValidationError = "Un véhicule avec cette plaque d'immatriculation existe déjà.";
			return;
		}

		car.BrandId = selectedBrandId;

		var response = await HttpClient.PostAsJsonAsync("api/Car", car);
		if (response.IsSuccessStatusCode)
		{
			NavigationManager.NavigateTo("/cars");
		}
		else
		{
			customValidationError = await response.Content.ReadAsStringAsync();
		}
	}
}
