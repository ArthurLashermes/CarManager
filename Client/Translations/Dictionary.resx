<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCarString" xml:space="preserve">
    <value>Add a new car model</value>
  </data>
  <data name="AddMaintenanceString" xml:space="preserve">
    <value>Add a maintenance</value>
  </data>
  <data name="AddString" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddVehicleString" xml:space="preserve">
    <value>Add a vehicle</value>
  </data>
  <data name="BackString" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BrandString" xml:space="preserve">
    <value>Brand:</value>
  </data>
  <data name="CancelString" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CarNameEmptyString" xml:space="preserve">
    <value>Car model name should not be empty</value>
  </data>
  <data name="CarNameNotEmptyString" xml:space="preserve">
    <value>The car model name should at least be 1 character long</value>
  </data>
  <data name="CarNameString" xml:space="preserve">
    <value>Car model name </value>
  </data>
  <data name="CarsString" xml:space="preserve">
    <value>Cars model</value>
  </data>
  <data name="CarString" xml:space="preserve">
    <value>Carmodel:</value>
  </data>
  <data name="ConfirmString" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="DeleteErrorCar" xml:space="preserve">
    <value>Error while deleting the car model</value>
  </data>
  <data name="DescriptionEmptyString" xml:space="preserve">
    <value>The maintenance description should at least be 1 character long</value>
  </data>
  <data name="DescriptionString" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="EnergyString" xml:space="preserve">
    <value>Energy</value>
  </data>
  <data name="ExistingCarNameForBrandString" xml:space="preserve">
    <value>A Car model already exist for this brand</value>
  </data>
  <data name="ExistingRegisterString" xml:space="preserve">
    <value>A vehicle for this registration number already exists</value>
  </data>
  <data name="FrequencyMaintenanceString" xml:space="preserve">
    <value>Frequency maintenance:</value>
  </data>
  <data name="HomeString" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="LoadErrorVehicles" xml:space="preserve">
    <value>Error while loading vehicles</value>
  </data>
  <data name="LoadingString" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="MaintenanceFrequencyString" xml:space="preserve">
    <value>Maintenance frequency</value>
  </data>
  <data name="MileagePositiveString" xml:space="preserve">
    <value>Mileage should be a positive</value>
  </data>
  <data name="MileageString" xml:space="preserve">
    <value>Mileage:</value>
  </data>
  <data name="NameString" xml:space="preserve">
    <value>Name: </value>
  </data>
  <data name="NegativeFrequencyMaintenanceString" xml:space="preserve">
    <value>The frequency maintenance cannot be negative</value>
  </data>
  <data name="NoCarDisplayString" xml:space="preserve">
    <value>No cars models to display</value>
  </data>
  <data name="NoVehicleLateForMaintenanceString" xml:space="preserve">
    <value>No Vehicles late for maintenances</value>
  </data>
  <data name="NoVehiclesDisplayString" xml:space="preserve">
    <value>No vehicles to display</value>
  </data>
  <data name="PositiveMileageString" xml:space="preserve">
    <value>Mileage should be positive</value>
  </data>
  <data name="RegisterNumberString" xml:space="preserve">
    <value>Registration number:</value>
  </data>
  <data name="RegistrationNumberFormatString" xml:space="preserve">
    <value>The registration number shoud be between 7 and 9 characters long</value>
  </data>
  <data name="SaveModificationsString" xml:space="preserve">
    <value>Save changes</value>
  </data>
  <data name="SelectBrandString" xml:space="preserve">
    <value>Select a brand</value>
  </data>
  <data name="SelectCarString" xml:space="preserve">
    <value>Select a car model</value>
  </data>
  <data name="ShouldSelectBrandString" xml:space="preserve">
    <value>You have to select a brand</value>
  </data>
  <data name="ShouldSelectCarString" xml:space="preserve">
    <value>You have to select a car</value>
  </data>
  <data name="VehicleLateForMaintenanceString" xml:space="preserve">
    <value>Vehicles late for maintenances</value>
  </data>
  <data name="VehiclesString" xml:space="preserve">
    <value>Vehicles</value>
  </data>
  <data name="VehicleString" xml:space="preserve">
    <value>Vehicle</value>
  </data>
  <data name="VehicleYearString" xml:space="preserve">
    <value>The year of the vehicle should be between 1900 and</value>
  </data>
  <data name="YearString" xml:space="preserve">
    <value>Year:</value>
  </data>
</root>